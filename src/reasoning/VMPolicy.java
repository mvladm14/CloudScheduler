package reasoning;

import database.model.Resource;
import database.model.Server;
import database.model.VirtualMachine;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : VMPolicy.java
//  @ Date : 4/17/2014
//  @ Author : 
//
//




/** */
public class VMPolicy extends Policy
{
	public VMPolicy(String[] param) {
		super(param);
		// TODO Auto-generated constructor stub
		//instantiate local fields with param values
	}

	/** */
	public String state;
	
	/***
	 * To calculate the violation degree of a low level GPI/KPI policy defining the 
	 * virtual activity QoS requests for computing resources we have represented 
	 * both the activity allocated server computing resources and the activity 
	 * request for resources in a 3D space  having as axis the 
	 * main server resources (CPU, MEM, HDD).
	 * */
	

	@Override
	public float computeQoSViolation(Resource r, Resource reference) {
		VirtualMachine vm = (VirtualMachine) r;
		Server server = (Server) reference;
		double absRam = Math.abs(vm.getRAM().getCapacity() - server.getRAM().getCapacity());
		double absCPU = Math.abs(vm.getCPU().getAllCPU() - server.getCPU().getAllCPU());
		double absHDD = Math.abs(vm.getHDD().getCapacity() - server.getHDD().getCapacity());
		return (float) Math.sqrt(Math.pow(absRam, 2) + Math.pow(absCPU,2) + Math.pow(absHDD, 2));
	
	}
}
